[["index.html", "Kungfu Pandas Li nói u Gii thiu cun sách Gii thiu tác gi", " Kungfu Pandas Lê Hunh c 2022-04-18 Li nói u Gii thiu cun sách Gii thiu tác gi "],["cu-trúc-và-kiu-d-liu.html", "Chng 1 Cu trúc và kiu d liu 1.1 Series 1.2 DataFrame 1.3 Data type trong pandas", " Chng 1 Cu trúc và kiu d liu Mc tiêu ca chng này nhm gii thiu v các cu trúc c bn trong Pandas là Series và DataFrame. Trong chng này, bn s hc cách khi to các cu trúc này cng nh mt s thao tác c bn trên Series. Bn cng s c bit v mt s kiu d liu thng gp trong pandas và cách  gim thiu b nh s dng khi khi to d liu. 1.1 Series Trong Pandas, Series là mng 1 chiu bao gm mt danh sách giá tr, và mt mng cha index ca các giá tr. Trong d liu dng bng, mi Series c xem nh là mt ct ca bng ó. Cách n gin  to Series nh sau s = pd.Series(data, index=None, name=None) Trong ó data có th có dng: numpy.ndarray, List Python dict Scalar index có th truyn hoc không, tùy vào dng ca data mà index s c nh ngha khác nhau. name là tên ca Series, giá tr này cng không nht thit phi truyn vào. 1.1.1 Các cách khi to Khi to Series bng array Khi không truyn giá tr index, Series s mc nh index ca nó là 1 mng s nguyên t 0 n len(data) - 1 In [1]: pd.Series(data=[0, 1, 2], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], name=&quot;meow&quot;) Out[1]: a 0 b 1 c 2 Name: meow, dtype: int64 Khi to Series bng dict In [1]: pd.Series({&quot;b&quot;: 1, &quot;a&quot;:0, &quot;c&quot;: 2}) Out[1]: b 1 a 0 c 2 dtype: int64 Lu ý: Trong trng hp bn truyn bin index vào, Series s ánh index da vào th t trong index, và ch cha các giá tr ca dict có key nm trong index. Vi các giá tr trong bin index không có trong keys ca dict, Series s to ra các giá tr b thiu NaN. In [1]: pd.Series({&quot;a&quot;: 0, &quot;b&quot;: 1, &quot;c&quot;: 2, &quot;e&quot;: 4}, index=[&quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;a&quot;]) Out[1]: b 1.0 c 2.0 d NaN a 0.0 dtype: float64 Lu ý: NaN là giá tr mc nh cho d liu b thiu trong pandas và giá tr này có kiu là float64 nên kiu d liu ca Series cng là float64 khác vi int64  ví d trc ó. Khi to Series bng mt giá tr (Scalar) In [1]: pd.Series(data=1, index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) Out[1]: a 1 b 1 c 1 dtype: int64 1.1.2 Mt s thao tác c bn Thao tác trên Series cng ging vi thao tác trên numpy.array. Ngoài ra chúng ta còn có th tác vi Series da vào index Ví d: In [1]: s = pd.Series(data=[0, 1, 2, 3, 4, 5], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]) Hin th toàn b giá tr ca Series Ta gi thuc tính .values In [1]: s.values Out[1]: array([0, 1, 2, 3, 4, 5]) Ly theo indice In [2]: s[2] Out[2]: 2 Ly theo index In [3]: s[&quot;c&quot;] Out[3]: 2 Slice indice In [4]: s[1:3] Out[4]: b 1 d 2 dtype: int64 Slice index In [5]: s[&quot;b&quot;:&quot;c&quot;] Out[5]: b 1 c 2 dtype: int64 List indice In [6]: s[[1, 2, 4]] Out[6]: b 1 c 2 e 4 dtype: int64 List index In [7]: s[[&quot;b&quot;, &quot;c&quot;, &quot;e&quot;]] Out[7]: b 1 c 2 e 4 dtype: int64 iu kin In [5]: s[s &gt; s.mean()] Out[5]: d 3 e 4 f 5 dtype: int64 1.2 DataFrame DataFrame là cu trúc d liu chính và cng là c trng ca pandas. Cng ging nh SQL Table, DataFrame là mt bng gm mt hay nhiu ct d liu. Hoc có th nói rõ hn là DataFrame là tp hp các Series li vi nhau. Cách khi to DataFrame nh sau df = pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) Cng ging nh Series, data ca DataFrame có nhiu cách khi to khác nhau nh: dict ca Series, dict ca numpy.array/List Mng 2 chiu numpy.ndarray, List ca List Mng có cu trúc T 1 Series T DataFrame khác Tùy vào cu trúc ca data mà chúng ta có th b qua bin index. Bin columns th hin tên ca các Series. dtype s nh ngha các kiu d liu ca d liu, chúng ta s tho lun v nó  phn k tip ca chng này. copy dùng  to bn sao t d liu data, nó ch nh hng khi data là DataFrame khác hoc numpy.ndarray, vic copy này s tránh trng hp 2 bin cùng tr v cùng 1 b nh. 1.2.1 Các cách khi to Khi to DataFrame t dict ca Series Khi không truyn bin index vào, thì index ca DataFrame s là hp gia 2 index ca Series và chúng s c sp xp theo th t t vng. Nu ta không truyn columns thì các ct ca DataFrame s c sp xp theo th t truyn vào các keys ca dict. Khi truyn bin index vào, tng t nh Series, ch nhng index nm trong index mi c chn, còn nhng index b thiu s c in giá tr NaN Khi truyn giá tr columns, DataFrame s chn nhng Series thuc dict có key thuc columns, giá tr trong columns không có trong key ca dict s c gán NaN In [1]: d = { &quot;one&quot;: pd.Series([1, 2, 3], index=[&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]), &quot;two&quot;: pd.Series([1, 2, 3, 4], index=[&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;d&quot;]) } In [2]: pd.DataFrame(d) Out[2]: one two a 3.0 2 b 2.0 3 c 1.0 1 d NaN 4 In [3]: pd.DataFrame(d, index=[&quot;d&quot;, &quot;b&quot;, &quot;a&quot;]) Out[3]: one two d NaN 4 b 2.0 3 a 3.0 2 In [4]: pd.DataFrame(d, index=[&quot;d&quot;, &quot;b&quot;, &quot;a&quot;], columns=[&quot;two&quot;, &quot;three&quot;]) Out[4]: two three d 4 NaN b 3 NaN a 2 NaN Khi to DataFrame t dict ca numpy.ndarray/List i vi vic khi to này, bt buc các mng phi có cùng  dài. Khi không truyn index vào thì index ca DataFrame s c to t 0 n len(n) - 1 trong ó n là  dài ca mng. Khi truyn giá tr columns, DataFrame s chn nhng key thuc dict và cng thuc columns, giá tr trong columns không có trong key ca dict s c gán NaN In [1]: d = { &quot;one&quot;: [1, 2, 3, 4], &quot;two&quot;: [1, 2, 3, 4], &quot;three&quot;: [1, 2, 3, 4] } In [2]: pd.DataFrame(data=d, index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;], columns=[&quot;one&quot;, &quot;two&quot;, &quot;four&quot;]) Out[2]: one two four a 1 1 NaN b 2 2 NaN c 3 3 NaN d 4 4 NaN Khi to DataFrame t Mng 2 chiu/ 2-d numpy.ndarray Khi không truyn index vào thì index ca DataFrame s c to t 0 n len(n) - 1 trong ó n là s lng List con hoc là s dòng hay shape[0] ca numpy.ndarray. Khi không truyn columns thì tên columns s c to t 0 n len(n) - 1 vi n là  dài ln nht ca List con hoc shape[1] ca numpy.ndarray In [1]: pd.DataFrame(data=[[1, 2], [3, 4, 5]], index=[&quot;a&quot;, &quot;b&quot;], columns=[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;]) Out[1]: one two three a 1 2 NaN b 3 4 5.0 In [2]: pd.DataFrame(data=np.random.rand(2,3), index=[&quot;a&quot;, &quot;b&quot;], columns=[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;])) Out[2]: one two three a 0.662008 0.085735 0.331281 b 0.115360 0.358092 0.862477 Khi to DataFrame t danh sách các dict  cách khi to này, bn hãy tng tng rng mi dict là mt dòng ca DataFrame vi các key là tên ct và value là giá tr ti ct ó. Vic truyn thêm hoc không truyn index cng ging nh các trng hp khi to trên. Lu ý: Trong trng hp này, nu bn truyn columns vào thì columns bt buc phi cha tt c các key ca dict Trong ví d di ây, columns phi cha toàn b keys [\"one\", \"two\", \"three\"], nu thiu 1 trong 3 s phát sinh li. In [1]: d = [{&quot;one&quot;: 1, &quot;two&quot;: 2}, {&quot;one&quot;: 4, &quot;two&quot;: 5, &quot;three&quot;: 6}] In [2]: pd.DataFrame(d, index=[&quot;a&quot;, &quot;b&quot;], columns=[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]) Out[2]: one two three four a 1 2 NaN NaN b 4 5 6.0 NaN Khi to DataFrame t Mng có cu trúc Mng có cu trúc là mng mà các phn t ca nó là mt cu trúc, bao gm các thành phn nh hn, các thành phn này c t tên và khai báo kiu d liu. Di ây là mt ví d Mng có cu trúc trong numpy In [1]: data = np.array([(&#39;pikachu&#39;, 9, 27.0), (&#39;mewtwo&#39;, 3, 81.0)], dtype=[(&#39;name&#39;, &#39;U10&#39;), (&#39;age&#39;, &#39;i4&#39;), (&#39;weight&#39;, &#39;f4&#39;)]) In [2]: pd.DataFrame(data) Out[2]: name age weight 0 pikachu 9 27.0 1 mewtwo 3 81.0 Khi to DataFrame t namedtuple Các trng trong nametuple s c gán thành tên các columns trong DataFrame. Nhng giá tr ca namedtuple s c xem là 1 dòng trong DataFrame. S lng ct ca DataFrame s ph thuc vào s lng giá tr ca phn t namedtuple u tiên. Nu các phn t phía sau có s lng giá tr ít hn thì s c in NaN và ngc li s tr ra li nu s lng giá tr ca namedtuple ln hn s lng giá tr ca phn t namedtuple u tiên. Ví d v cách to namedtuple from collections import namedtuple Point2D = namedtuple(&quot;Point2D&quot;, &quot;x y&quot;) Point3D = namedtuple(&quot;Point3D&quot;, &quot;x y z&quot;) To DataFrame t namedtuple Point2D In [1]: pd.DataFrame([Point2D(0, 0), Point2D(0, 1), Point2D(0, 2)]) Out[1]: x y 0 0 0 1 0 1 2 0 2 To DataFrame t namedtuple c Point2D và Point3D In [1]: pd.DataFrame([Point3D(0, 0, 0), Point2D(0, 1), Point3D(0, 2, 3)]) Out[1]: x y z 0 0 0 0.0 1 0 1 NaN 2 0 2 3.0 Nh ta thy, ti phn t th 2 ch có 2 giá tr, trong khi phn t th nht có 3 giá tr, vy nên phn t b thiu ti ct z s c gán NaN Khi to DataFrame t Series In [1]: s = pd.Series(data=[0, 1, 2], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], name=&quot;meow&quot;) In [2]: pd.DataFrame(s) Out[2]: meow a 0 b 1 c 2 name ca Series s là tên ct ca DataFrame và index ca Series s là index ca DataFrame nu ta không truyn các bin index, columns khi khi to pd.DataFrame 1.2.2 Các hàm khi to thay th DataFrame.from_dict Cách khi to pd.DataFrame.from_dict(data, orient=&#39;columns&#39;, dtype=None, columns=None) data truyn vào là 1 dict, orient có 2 giá tr có th a vào là {\"columns\", \"index\"}, columns là danh sách tên các ct ca DataFrame. Lu ý: Ch c truyn columns khi orient=\"index\". Khi orient=\"columns\" s báo li. Ví d to DataFrame khi orient=\"columns\". Vi cách khi to này tên các ct ca DataFrame s là key ca dict In [1]: data = {&quot;col_1&quot;: [3, 2, 1, 0], &quot;col_2&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]} In [2]: pd.DataFrame.from_dict(data) Out[2]: col_1 col_2 0 3 a 1 2 b 2 1 c 3 0 d Ví d to DataFrame khi orient=\"index\". Vi cách khi to này index ca DataFrame s là key ca dict. In [1]: data = {&quot;col_1&quot;: [3, 2, 1, 0], &quot;col_2&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]} In [2]: pd.DataFrame.from_dict(data, orient=&quot;index&quot;, columns=[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]) Out[2]: col_1 col_2 0 3 a 1 2 b 2 1 c 3 0 d DataFrame.from_records Cách khi to pd.DataFrame.from_records(data) data truyn vào có th là mt mng có cu trúc In [1]: data = np.array([(&#39;Rex&#39;, 9, 81.0), (&#39;Fido&#39;, 3, 27.0)], dtype=[(&#39;name&#39;, &#39;U10&#39;), (&#39;age&#39;, &#39;i4&#39;), (&#39;weight&#39;, &#39;f4&#39;)]) In [2]: pd.DataFrame.from_records(data, index=[&quot;a&quot;, &quot;b&quot;]) Out[2]: name age weight a Rex 9 81.0 b Fido 3 27.0 D liu có th mt danh sách các namedtuple from collections import namedtuple Point2D = namedtuple(&quot;Point2D&quot;, &quot;x y&quot;) Point3D = namedtuple(&quot;Point3D&quot;, &quot;x y z&quot;) pd.DataFrame.from_records([Point3D(0, 0, 0), Point2D(0, 1), Point3D(0, 2, 3)], columns=[&quot;x&quot;,&quot;y&quot;,&quot;z&quot;], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) x y z a 0 0 0.0 b 0 1 NaN c 0 2 3.0 Hoc 1 danh sách các dict In [1]: d = [{&quot;one&quot;: 1, &quot;two&quot;: 2}, {&quot;one&quot;: 4, &quot;two&quot;: 5, &quot;three&quot;: 6}] In [2]: pd.DataFrame.from_records(d, index=[&quot;a&quot;, &quot;b&quot;], columns=[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]) Out[2]: one two three four a 1 2 NaN NaN b 4 5 6.0 NaN 1.3 Data type trong pandas  kim tra kiu d liu ca Series hay DataFrame bn có th gi thuc tính dtypes hoc phng thc .info(). Các kiu d liu thng gp ca Pandas c mô t theo bng di ây: Các kiu d liu ph bin Numpy/Pandas object Hin th Boolean np.bool bool Integer np.int, np.uint int uint Float np.float float Object np.object O, object Datetime np.datetime64, pd.Timestamp datetime64 Timedelta np.timedelta64, pd.Timedelta timedelta64 Category pd.Categorical category Complex np.complex complex Ví d: In [1]: df = pd.DataFrame({ &#39;col_1&#39;: [1, 0, 1, 0], &#39;col_2&#39;: [1.0, 2.0, 3.0, 4.0], &#39;col_3&#39;: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;], &#39;col_4&#39;: [&#39;1&#39;, 2, &#39;3&#39;, 4], &#39;col_5&#39;: [True, False, True, False], &#39;col_6&#39;: [&#39;2021-06-01&#39;, &#39;2021-06-02&#39;, &#39;2021-06-03&#39;, &#39;2021-06-04&#39;]}) In [2]: df Out[2]: col_1 col_2 col_3 col_4 col_5 col_6 0 1 1.0 1 1 True 2021-06-01 1 0 2.0 2 2 False 2021-06-02 2 1 3.0 3 3 True 2021-06-03 3 0 4.0 4 4 False 2021-06-04 In [3]: df.dtypes Out[3]: col_1 int64 col_2 float64 col_3 object col_4 object col_5 bool col_6 object dtype: object Lu ý: Nu không khai báo kiu d liu khi khi to, pandas s mc nh kiu d liu là int64, float64, object và bool. Pandas s không bit kiu d liu timestamp nu không khai báo. Ch có th khai báo duy nht 1 kiu d liu khi khi to pandas. Ví d nh tt c d liu ca bn là int hoc có th c ép kiu v intthì có th khai báo dtype=np.int  ví d phía di col_1, col_2, col_3, col_4, col_5 có th ép v kiu int, còn col_6 thì không th ép kiu c. In [1]: df = pd.DataFrame({ &#39;col_1&#39;: [1, 0, 1, 0], &#39;col_2&#39;: [1.0, 2.0, 3.0, 4.0], &#39;col_3&#39;: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;], &#39;col_4&#39;: [&#39;1&#39;, 2, &#39;3&#39;, 4], &#39;col_5&#39;: [True, False, True, False], &#39;col_6&#39;: [&#39;2021-06-01&#39;, &#39;2021-06-02&#39;, &#39;2021-06-03&#39;, &#39;2021-06-04&#39;]}, dtype=np.int) In [2]: df Out[2]: col_1 col_2 col_3 col_4 col_5 col_6 0 1 1 1 1 1 2021-06-01 1 0 2 2 2 0 2021-06-02 2 1 3 3 3 1 2021-06-03 3 0 4 4 4 0 2021-06-04 In [3]: df.dtypes Out[3]: col_1 int64 col_2 int64 col_3 object col_4 int64 col_5 int64 col_6 int64 dtype: object Mo: Nu d liu có khong nh thì thay vì khai báo kiu np.int, ta có th khai báo kiu integer vi s byte phù hp  gim b nh lu tr.  xem b nh s dng ca DataFrame, ta có th dùng .memory_usage(). Mt s kiu integer trong numpy nh np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64 Theo ví d trên, khi dtype=np.int In [1]: df.memory_usage() Out[1]: Index 128 col_1 32 col_2 32 col_3 32 col_4 32 col_5 32 col_6 32 dtype: int64 và sau khi thay bng dtype=np.int8 In [1]: df.memory_usage() Out[1]: Index 128 col_1 4 col_2 4 col_3 4 col_4 4 col_5 4 col_6 32 dtype: int64 Phng thc ép kiu này c áp dng khi bn khi to DataFrame, ngoài ra còn có hàm ép kiu khác i vi DataFrame cho trc, ni dung này s c  cp  Chng 3. "],["nhp-xut-trong-pandas.html", "Chng 2 Nhp xut trong pandas 2.1 c và lu file 2.2 Cu hình pandas", " Chng 2 Nhp xut trong pandas  Chng 1 chúng ta ã bit cách khi to DataFrame t các d liu cho trc. Trong chng này s hng dn cách c d liu t file bng pandas, mt s kiu file thng thy cho d liu dng bng là .csv và .xlsx. Bn cng có th c d liu bán cu trúc nh JSON bng cách load file bng Python sau ó dùng các cách khi to nh  Chng 1 hoc có th dùng hàm ph tr ca Pandas.  phn th hai ca chng, bn s c hng dn mt s cách cu hình cho Pandas nh thay i s dòng, s ct hin th 2.1 c và lu file 2.1.1 csv, tsv 2.1.1.1 c file Chúng ta có th c file csv vi pandas theo lnh sau df = pd.read_csv(filepath, sep=&#39;,&#39;, names=NoDefault.no_default, index_col=None, usecols=None, dtype=None, skiprows=None, skipfooter=0, nrows=None) Trong ó: filepath là ng dn n file trong máy hoc ng link URL sep dùng  nhn din cách chia thành ct, nu không truyn tham s này thì pandas t hiu là chia theo ',', ngoài ra có th chia theo ';' i vi macOS và '\\t' vi file có nh dng .tsv names là tên các ct ca bng. Nu bng ã có tên ct thì nên b qua tham s này, pandas s ly dòng u tiên ca file làm tên ct. index_col dùng  ch nh v trí các ct dùng  làm index cho bng. usecols dùng  ch nh v trí hoc tên các ct cn c. dtype dùng  nh dng kiu d liu ca các ct. skiprows c dùng khi mun b qua mt s dòng u ca bng. skipfooter tng t nh skiprows nhng s b qua các dòng cui cùng ca bng. nrows dùng  ch nh s lng dòng ca bn mà bn s c bng pandas Ví d c file d liu sale c cho ti ây. Gi s ta ch ly các ct date, weekly_sales và is_holiday và ly ct date làm index và ch ly 6 dòng u In [1]: df = pd.read_csv(&#39;https://raw.githubusercontent.com/lhduc94/kungfupandas/master/data/sales_subset.csv&#39;, index_col=[&#39;date&#39;], usecols=[&#39;date&#39;,&#39;weekly_sales&#39;,&#39;is_holiday&#39;], nrows=6) In [2]: df Out[2]: weekly_sales is_holiday date 2010-02-05 24924.50 False 2010-03-05 21827.90 False 2010-04-02 57258.43 False 2010-05-07 17413.94 False 2010-06-04 17558.09 False 2010-07-02 16333.14 False 2.1.1.2 Xut file  lu DataFrame di dng file ta có th dùng câu lnh .to_csv() theo cú pháp sau df.to_csv(filename, sep=&#39;,&#39;, columns=None, header=True, index=True) Trong ó: filename là a ch file mà bn mun lu li sep tng t nh lúc c file columns là tên các ct bn mun lu xung, nu mun lu tt c các ct thì bn có th b qua tham s này. header mc nh là True nu bn mun lu tên ct index mc nh là True nu bn mun lu index ca bng. Ví d df.to_csv(&#39;sales.csv&#39;, columns=&#39;weekly_sales&#39;, index=False) 2.1.2 Excel 2.1.2.1 c file Excel  c file Excel ta dùng cú pháp sau x = pd.ExcelFile(filename) Vi filename là ng dn n file  xem tên các sheets ca x ta có th dùng x.sheet_names. Sau ó  c tng sheet ca x ta có th dùng .parse() df = x.parse(sheet_name, header=0, names=None, index_col=None, usecols=None, skiprows=None, skipfooter=0, nrows=None) Trong ó sheet_name là tên sheet cn c, các thông s còn li tng t nh phn c file csv và tsv. Mt cách khác  c file excel là dùng hàm pandas.read_excel vi tham s io là tên file. 2.1.2.2 Xut file Excel Gi s ta có các DataFrame df1, df2, df3 cn c lu vào 1 file Excel duy nht import pandas as pd df1 = pd.DataFrame({&#39;col_1&#39;: [1, 2, 3, 4]}) df2 = pd.DataFrame({&#39;col_1&#39;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]}) df3 = pd.DataFrame({&#39;col_1&#39;: [True, True, False, False]})  ghi các bng vào file Excel, bc u tiên là khi to bin writer theo cú pháp writer = pd.ExcelWriter(&#39;pandas_multiple.xlsx&#39;, mode=&#39;w&#39;, if_sheet_exists=None, engine=None) Trong ó: filename là tên file excel mode là phng thc ghi file vi w là vit file mi và a là vit thêm vào file. Mc nh là w if_sheet_exists là phng thc ghi file nu file hoc sheet ã tn ti, bao gm các phng thc di ây (mc nh là error) error: hin ValueError nu ã tn ti sheet new: To sheet mi vi tên ph thuc vào engine replace: Xóa ni dung ca sheet trc khi vit. overlay: Vit lên sheet ã tn ti mà không xóa các sheet c engine: Mt s kiu h tr ghi file nh xlsxwriter, openpyxl, openpyxl, odswriter Lu ý: mode='w' không c s dng vi engine xlsxwriter, khi khai báo engine này s báo li. if_sheet_exists ch s dng vi mode='a' overlay ch h tr vi phiên bn 1.4.0 tr lên.  ghi tng sheet bn dùng lnh .to_excel(). Sau khi ghi tt c các sheet bn kt thúc vi writer.save()  lu file writer = pd.ExcelWriter(&#39;mul_sheets.xlsx&#39;, mode=&#39;w&#39;, engine=&#39;openpyxl&#39;) df1.to_excel(writer, sheet_name=&#39;Sheet1&#39;) df2.to_excel(writer, sheet_name=&#39;Sheet2&#39;) df3.to_excel(writer, sheet_name=&#39;Sheet3&#39;) writer.save() Mo: Có th dùng with  m file  tránh trng hp quên gi lnh .save(), lnh with s t ng lu file sau khi kt thúc các lnh con trong nó a import pandas as pd df1 = pd.DataFrame({&#39;col_1&#39;: [2, 3, 4, 5]}) df2 = pd.DataFrame({&#39;col_1&#39;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]}) df3 = pd.DataFrame({&#39;col_1&#39;: [True, True, False, False]}) sheet_names = [&#39;Sheet1&#39;,&#39;Sheet2&#39;, &#39;Sheet3&#39;] with pd.ExcelWriter(&#39;mul_sheets.xlsx&#39;, mode=&#39;a&#39;, if_sheet_exists=&#39;new&#39;, engine=&#39;openpyxl&#39;) as writer: for df, sheet_name in zip([df1, df2, df3], sheet_names): df.to_excel(writer, sheet_name) 2.1.3 JSON 2.1.3.1 c file JSON là 1 dng d liu khá ph bin trong thc t. Pandas h tr c file JSON theo phng thc sau bla 2.1.3.2 Xut file 2.1.4 Pickle 2.1.4.1 c file 2.1.4.2 Xut file 2.2 Cu hình pandas "],["Chuong-3.html", "Chng 3 Mt s hàm c bn 3.1 .head() và .tail() 3.2 .shape và .size 3.3 .info() 3.4 .describe() 3.5 .index 3.6 .memory_usage() 3.7 Ly Series trong pandas 3.8 .astype() 3.9 .drop_duplicates() 3.10 .value_counts() 3.11 .unique() và .nunique() 3.12 .drop() 3.13 .rename()", " Chng 3 Mt s hàm c bn df = pd.read_csv(&#39;https://raw.githubusercontent.com/lhduc94/kungfupandas/master/data/sales_subset.csv&#39;,index_col=[&#39;Unnamed: 0&#39;]) 3.1 .head() và .tail() Phng thc .head(n=5) hin th n dòng u tiên ca DataFrame, ngc li phng thc .tail(n=5) hin th n dòng cui cùng ca DataFrame In [1]: df.head() Out[1]: store type department date weekly_sales is_holiday \\ 0 1 A 1 2010-02-05 24924.50 False 1 1 A 1 2010-03-05 21827.90 False 2 1 A 1 2010-04-02 57258.43 False 3 1 A 1 2010-05-07 17413.94 False 4 1 A 1 2010-06-04 17558.09 False temperature_c fuel_price_usd_per_l unemployment 0 5.727778 0.679451 8.106 1 8.055556 0.693452 8.106 2 16.816667 0.718284 7.808 3 22.527778 0.748928 7.808 4 27.050000 0.714586 7.808 In [2]: df.tail() Out[2]: store type department date weekly_sales is_holiday \\ 10769 39 A 99 2011-12-09 895.00 False 10770 39 A 99 2012-02-03 350.00 False 10771 39 A 99 2012-06-08 450.00 False 10772 39 A 99 2012-07-13 0.06 False 10773 39 A 99 2012-10-05 915.00 False temperature_c fuel_price_usd_per_l unemployment 10769 9.644444 0.834256 7.716 10770 15.938889 0.887619 7.244 10771 27.288889 0.911922 6.989 10772 25.644444 0.860145 6.623 10773 22.250000 0.955511 6.228 3.2 .shape và .size Phng thc .shape cho bit s lng dòng và ct ca bng In [3]: df.shape Out[3]: (10774, 9) Trong dó 10774 là s lng dòng ca bng và 9 là s lng ct ca bng Phng thc .size cho bit s lng phn t ca bng In [4]: df.size Out[4]: 96966 3.3 .info() Phng thc .info() dùng  xem mt s thông tin c bn nh Index ca bng Tên các ct, s lng các phn t Null trong ct và kiu d liu ca chúng S lng các kiu d liu Dung lng ca bng Ví d In [5]: df.info() Out[5]: &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 10774 entries, 0 to 10773 Data columns (total 9 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 store 10774 non-null int64 1 type 10774 non-null object 2 department 10774 non-null int64 3 date 10774 non-null object 4 weekly_sales 10774 non-null float64 5 is_holiday 10774 non-null bool 6 temperature_c 10774 non-null float64 7 fuel_price_usd_per_l 10774 non-null float64 8 unemployment 10774 non-null float64 dtypes: bool(1), float64(4), int64(2), object(2) memory usage: 768.1+ KB Mo: Phng thc .info() có các tham s  tùy chnh các thông tin có th xem. Bn có th gii hn các thông tin theo các tham s di ây info(verbose=None, buf=None, max_cols=None, memory_usage=None, show_counts=None, null_counts=None) 3.4 .describe() Phng thc .describe() a ra mt s thng kê n gin nh count, mean, std, min, max và percentiles = [0.25, 0.5, 0.75]. Phng thc này ch áp dng cho các ct  dng numerical. In [6]: df.describe() Out[6]: store department weekly_sales temperature_c \\ count 10774.000000 10774.000000 10774.000000 10774.000000 mean 15.441897 45.218118 23843.950149 15.731978 std 11.534511 29.867779 30220.387557 9.922446 min 1.000000 1.000000 -1098.000000 -8.366667 25% 4.000000 20.000000 3867.115000 7.583333 50% 13.000000 40.000000 12049.065000 16.966667 75% 20.000000 72.000000 32349.850000 24.166667 max 39.000000 99.000000 293966.050000 33.827778 fuel_price_usd_per_l unemployment count 10774.000000 10774.000000 mean 0.749746 8.082009 std 0.059494 0.624355 min 0.664129 3.879000 25% 0.708246 7.795000 50% 0.743381 8.099000 75% 0.781421 8.360000 max 1.107674 9.765000 Mo: Bn có th thay i thông s percentiles bng cách truyn tham s này vào trong .describe() Ví d In [7]: df.describe(percentiles=[0.1, 0.99])) Out[7]: store department weekly_sales temperature_c \\ count 10774.000000 10774.000000 10774.000000 10774.000000 mean 15.441897 45.218118 23843.950149 15.731978 std 11.534511 29.867779 30220.387557 9.922446 min 1.000000 1.000000 -1098.000000 -8.366667 10% 2.000000 8.000000 607.695000 2.577778 50% 13.000000 40.000000 12049.065000 16.966667 99% 39.000000 99.000000 142193.400300 32.388889 max 39.000000 99.000000 293966.050000 33.827778 fuel_price_usd_per_l unemployment count 10774.000000 10774.000000 mean 0.749746 8.082009 std 0.059494 0.624355 min 0.664129 3.879000 10% 0.687640 7.127000 50% 0.743381 8.099000 99% 0.978565 9.765000 max 1.107674 9.765000 Lu ý: pandas mc nh tính thêm percentile ti 0.5 dù không truyn vào 3.5 .index Thuc tính .index  ly index ca DataFrame hoc Series. Ví d In [8]: df.index Out[8]: Int64Index([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... 10764, 10765, 10766, 10767, 10768, 10769, 10770, 10771, 10772, 10773], dtype=&#39;int64&#39;, length=10774) 3.6 .memory_usage() Phng thc .memory_usage(index=True, deep=False) giúp thông kê dung lng ca tng ct. Trong ó index tr v dung lng ca phn ánh index và deep nu t giá tr True s tr v cách tính toán sâu hn v b nh cho kiu object Ví d In [9]: df.memory_usage(index=False) Out[9]: store 86192 type 86192 department 86192 date 86192 weekly_sales 86192 is_holiday 10774 temperature_c 86192 fuel_price_usd_per_l 86192 unemployment 86192 dtype: int64 In [10]: df.memory_usage(deep=True) Out[10]: Index 86192 store 86192 type 624892 department 86192 date 721858 weekly_sales 86192 is_holiday 10774 temperature_c 86192 fuel_price_usd_per_l 86192 unemployment 86192 dtype: int64 3.7 Ly Series trong pandas S dng [&lt;tên ct&gt;]  ly 1 Series ca bng. Ví d  ly Series ca ct department ta làm nh sau In [11]: df[&#39;department&#39;] Out[11]: 0 1 1 1 2 1 3 1 4 1 .. 10769 99 10770 99 10771 99 10772 99 10773 99 Name: department, Length: 10774, dtype: int64 nhng Series này cng có th áp dng các phng thc tng t ca DataFrame nh .head(), .tail(). 3.8 .astype() Vi phng thc .astype() ta có th ép kiu d liu ca ct v dng khác. Vic ép kiu này giúp thay i kiu d liu  tin các thao tác nh ni 2 ct có 2 kiu str và int, ngoài ra vic ép kiu cng giúp gim c dung lng b nh dành cho bng.  ví d trên, ta thy ct department có giá tr max là 99 nhng c mc nh là int64 khá lãng phí, do ó ép kiu v int8 Trc khi ép kiu In [12]: df[&#39;department&#39;].dtypes Out[12]: dtype(&#39;int64&#39;) In [13]: df[&#39;department&#39;].memory_usage() - df[&#39;department&#39;].index.memory_usage() Out[13]: 86192 Sau khi ép kiu In [14]: df[&#39;department&#39;].astype(&#39;int8&#39;).memory_usage() - df[&#39;department&#39;].index.memory_usage() Out[14]: 10774 Ta thy sau khi ép kiu thì b nh lu tr ca ct department gim i 8 ln. Lu ý: df['department'].memory_usage() tr v dung lng lu tr ca ct department và dung lng lu tr ca index 3.9 .drop_duplicates() Phng thc này tr v DataFrame ã c loi b các hàng trùng nhau. Lnh thc hin DataFrame.drop_duplicates(subset=None, keep=&#39;first&#39;, inplace=False, ignore_index=False) Trong ó: subset: tên ct hoc danh sách các ct cn lc giá tr trùng lp, nu không truyn vào s mc nh chn tt c các ct keep: các kiu lc duplicate bao gm các la chn sau: 'first': loi b các dòng bn sao, ch gi li dòng u tiên 'last': loi b các dòng bn sao, ch gi li dòng cui cùng False: loi tt c các dòng trùng lp inplace: thao tác trc tip trên bng nu  giá tr True hoc to 1 bn sao vi giá tr False ignore_index: Nu True tr v index ánh s li t 0 n n-1 Ví d In [15]: df = pd.DataFrame({ &#39;action&#39;: [&#39;view&#39;, &#39;view&#39;, &#39;add to cart&#39;, &#39;add to cart&#39;, &#39;add to cart&#39;,], &#39;fruit&#39;: [&#39;orange&#39;, &#39;orange&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;apple&#39;], &#39;times&#39;: [ 1, 1, 3, 2, 4] }) In [16]: df Out[16]: action fruit times 0 view orange 1 1 view orange 1 2 add to cart orange 3 3 add to cart apple 2 4 add to cart apple 4 In [17]: df.drop_duplicates() Out[17]: action fruit times 0 view orange 1 2 add to cart orange 3 3 add to cart apple 2 4 add to cart apple 4 In [18]: df.drop_duplicates(subset=[&#39;action&#39;]) Out[18]: action fruit times 0 view orange 1 2 add to cart orange 3 In [19]: df.drop_duplicates(subset=[&#39;action&#39;,&#39;fruit&#39;], keep=&#39;last&#39;, ignore_index=True) action fruit times 0 view orange 1 1 add to cart orange 3 2 add to cart apple 4 3.10 .value_counts() Phng thc này tr s ln xut hin ca các phn t trong Series. Kt qu tr v mc nh s sp xp theo s ln xut hin gim dn và mc nh b qua các giá tr null Series.value_counts(normalize=False, sort=True, ascending=False, bins=None, dropna=True) Trong ó: normalize: True s tr v t l xut hin ca các phn t sort: True s tr v kt qu sp xp theo s ln xut hin, False s tr v kt qu sp xp theo trình t xut hin ca phn t ascending: True s tr v kt qu sp xp theo s ln xut hin tng dn. bins: gom nhóm các phn t, tng t pd.cut dropna: False s m tt c các phn t k c null Ví d In [19]: s = pd.Series([3, 1, 2, 3, np.nan, 4, np.nan]) In [20]: s.value_counts() Out[20]: 3.0 2 1.0 1 2.0 1 4.0 1 dtype: int64 In [21]: s.value_counts(normalize=True, sort=False, dropna=False) Out[21]: 3.0 0.285714 1.0 0.142857 2.0 0.142857 NaN 0.285714 4.0 0.142857 dtype: float64 In [22]: s.value_counts(bins=3) Out[22]: (0.996, 2.0] 2 (2.0, 3.0] 2 (3.0, 4.0] 1 dtype: int64 3.11 .unique() và .nunique() Phng thc .unique() tr v các giá tr khác nhau ca Series và .nunique() tr v s lng các giá tr khác nhau ca Series. Kt qu tr v ca .unique() là danh sách các phn t c sp xp theo th t u vào ca bng.  loi b giá tr NA trong lúc m có th gi .nunique(dropna=False) Cách s dng In [23]: s = pd.Series([2, 3, 1 ,2, np.nan], name=&#39;col_0&#39;) In [24]: s Out[24]: 0 2.0 1 3.0 2 1.0 3 2.0 4 NaN Name: col_0, dtype: float64 In [25]: s.unique() Out[25]: array([ 2., 3., 1., nan]) In [26]: s.nunique(dropna=False) Out[26]: 4 3.12 .drop() Phng thc .drop() dùng  loi b các dòng hoc ct theo ch nh. Cú pháp ca .drop() nh sau DataFrame.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors=&#39;raise&#39;) Trong ó: labels: Tên ct hoc dòng cn loi b. axis: Mc inh giá tr 0 loi b theo dòng và 1 loi b theo ct. index: Ch nh index ca dòng cn loi b, tng ng labels, axis=0 columns: Ch nh ct cn loi b, tng ng labels, axis=1 level: Dành cho MultiIndex, khi ó ch nh cp  index cn loi b inplace: Thc hin trên chính bng hay to ra mt bng sao errors: mc nh raise s tr ra li và ignore nu mun b qua li. Ví d In [27]: df = pd.DataFrame(np.arange(16).reshape(4, 4), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;], index=[&#39;A&#39;, &#39;1A&#39;, &#39;2A&#39;, &#39;3A&#39;]) In [28]: df Out[28]: A B C D A 0 1 2 3 1A 4 5 6 7 2A 8 9 10 11 3A 12 13 14 15 In [29]: df.drop(&#39;A&#39;) Out[29]: A B C D 1A 4 5 6 7 2A 8 9 10 11 3A 12 13 14 15 In [30]: df.drop(columns=[&#39;A&#39;, &#39;C&#39;]) Out[30]: B D A 1 3 1A 5 7 2A 9 11 3A 13 15 In [31]: df.drop(index=[&#39;A&#39;, &#39;2A&#39;]) Out[31]: A B C D 1A 4 5 6 7 3A 12 13 14 15 3.13 .rename() "],["select-và-filter.html", "Chng 4 Select và Filter 4.1 Index 4.2 loc và iloc 4.3 Lc theo iu kin", " Chng 4 Select và Filter 4.1 Index 4.2 loc và iloc 4.3 Lc theo iu kin "],["tính-toán-trên-các-phn-t-trong-pandas.html", "Chng 5 Tính toán trên các phn t trong Pandas 5.1 S dng column element-wise 5.2 S dng apply 5.3 S dng iterator 5.4 X lý song song trong pandas", " Chng 5 Tính toán trên các phn t trong Pandas 5.1 S dng column element-wise 5.2 S dng apply 5.3 S dng iterator 5.4 X lý song song trong pandas "],["các-cách-phi-hp-nhiu-bng-vi-nhau.html", "Chng 6 Các cách phi hp nhiu bng vi nhau 6.1 Join 6.2 Merge 6.3 Concat", " Chng 6 Các cách phi hp nhiu bng vi nhau 6.1 Join 6.2 Merge 6.3 Concat "],["groupby-và-aggregate.html", "Chng 7 Groupby và Aggregate", " Chng 7 Groupby và Aggregate "],["làm-vic-vi-1-s-kiu-d-liu.html", "Chng 8 Làm vic vi 1 s kiu d liu 8.1 X lý d liu dng text 8.2 X lý d liu dng timestamp 8.3 Category trong pandas 8.4 X lý Missing data", " Chng 8 Làm vic vi 1 s kiu d liu 8.1 X lý d liu dng text 8.2 X lý d liu dng timestamp 8.3 Category trong pandas 8.4 X lý Missing data "],["mt-s-kin-thc-nâng-cao.html", "Chng 9 Mt s kin thc nâng cao 9.1 MultiIndex 9.2 Pivot và Merge 9.3 Resample 9.4 Window", " Chng 9 Mt s kin thc nâng cao 9.1 MultiIndex 9.2 Pivot và Merge 9.3 Resample 9.4 Window "],["anomaly-detection-project.html", "Chng 10 Anomaly Detection Project", " Chng 10 Anomaly Detection Project "],["visualize-vi-matplotlib.html", "Chng 11 Visualize vi Matplotlib", " Chng 11 Visualize vi Matplotlib "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
