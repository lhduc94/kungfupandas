[["index.html", "Kungfu Pandas Lời nói đầu Giới thiệu cuốn sách Cài đặt Jupyter Lab Cài đặt Pandas", " Kungfu Pandas Lê Huỳnh Đức 2021-05-26 Lời nói đầu Giới thiệu cuốn sách Cài đặt Jupyter Lab Cài đặt Pandas "],["cấu-trúc-và-kiểu-dữ-liệu.html", "Chương 1 Cấu trúc và kiểu dữ liệu 1.1 Series 1.2 DataFrame 1.3 Data type trong pandas", " Chương 1 Cấu trúc và kiểu dữ liệu 1.1 Series Trong Pandas, Series là mảng 1 chiều bao gồm một danh sách giá trị, và một mảng chứa index của các giá trị. Trong dữ liệu dảng bảng, mỗi Series được xem như là một cột của bảng đó. Cách đơn giản để tạo 1 series như sau s = pd.Series(data, index=None, name=None) Trong đó data có thể có dạng: numpy.ndarray, List Python dict Scalar index có thể truyền hoặc không, tùy vào dạng của data mà index sẽ được định nghĩa khác nhau. name là tên của Series, giá trị này cũng không nhất thiết phải truyền vào. Các cách khởi tạo Khởi tạo Series bằng array Khi không truyền giá trị index, Series sẽ mặc định index của nó là 1 mảng số nguyên từ 0 đến len(data) - 1 In [1]: pd.Series(data=[0, 1, 2], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], name=&quot;meow&quot;) Out[1]: a 0 b 1 c 2 Name: meow, dtype: int64 Khởi tạo Series bằng dict In [1]: pd.Series({&quot;b&quot;:1, &quot;a&quot;:0, &quot;c&quot;: 2}) Out[1]: b 1 a 0 c 2 dtype: int64 Lưu ý: Trong trường hợp bạn truyền biến index vào, Series sẽ đánh index dựa vào thứ tự trong index, và chỉ chứa các giá trị của dict có key nằm trong index. Với các giá trị trong biến index không có trong keys của dict, Series sẽ tạo ra các giá trị bị thiếu NaN. In [1]: pd.Series({&quot;a&quot;: 0, &quot;b&quot;: 1, &quot;c&quot;: 2, &quot;e&quot;: 4}, index=[&quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;a&quot;]) Out[1]: b 1.0 c 2.0 d NaN a 0.0 dtype: float64 Lưu ý: NaN là giá trị mặc định cho dữ liệu bị thiếu trong pandas và giá trị này có kiểu là float64 nên kiểu dữ liệu của Series cũng là float64 khác với int64 ở ví dụ trước đó. Khởi tạo Series bằng một giá trị (Scalar) In [1]: pd.Series(data=1, index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) Out[1]: a 1 b 1 c 1 dtype: int64 Một số thao tác cơ bản Thao tác trên Series cũng giống với thao tác trên numpy.array. Ngoài ra chúng ta còn có thể tác với Series dựa vào index Ví dụ: In [1]: s = pd.Series(data=[0, 1, 2, 3, 4, 5], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]) Lấy theo indice In [2]: s[2] Out[2]: 2 Lấy theo index In [3]: s[&quot;c&quot;] Out[3]: 2 Slice indice In [4]: s[1:3] Out[4]: b 1 d 2 dtype: int64 Slice index In [5]: s[&quot;b&quot;:&quot;c&quot;] Out[5]: b 1 c 2 dtype: int64 List indice In [6]: s[[1, 2, 4]] Out[6]: b 1 c 2 e 4 dtype: int64 List index In [7]: s[[&quot;b&quot;, &quot;c&quot;, &quot;e&quot;]] Out[7]: b 1 c 2 e 4 dtype: int64 Điều kiện In [5]: s[s &gt; s.mean()] Out[5]: d 3 e 4 f 5 dtype: int64 1.2 DataFrame DataFrame là cấu trúc dữ liệu chính và cũng là đặc trưng của pandas. Cũng giống như SQL Table, DataFrame là một bảng gồm một hay nhiều cột dữ liệu. Hoặc có thể nói rõ hơn là DataFrame là tập hợp các Series lại với nhau. Cách khởi tạo DataFrame như sau df = pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) Cũng giống như Series, data của DataFrame có nhiều cách khởi tạo khác nhau như: dict của Series, dict của numpy.array/List Mảng 2 chiều numpy.ndarray, List của List Bản ghi có cấu trúc Từ 1 Series Từ DataFrame khác Tùy vào cấu trúc của data mà chúng ta có thể bỏ qủua biến index. Biến columns thể hiện tên của các Series. dtype sẽ định nghĩa các kiểu dữ liêu của dữ liệu, chúng ta sẽ thảo luận về nó ở phần kế tiếp của chương này. copy dùng để tạo bản sao từ dữ liệu data, nó chỉ ảnh hưởng khi data là DataFrame khác hoặc numpy.ndarray, việc copy này sẽ tránh trường hợp 2 biến cùng trỏ về cùng 1 bộ nhớ. Các cách khởi tạo Khởi tạo DataFrame từ dict của Series Khi không truyền biến index vào, thì index của DataFrame sẽ là hợp giữa 2 index của Series và chúng sẽ được sắp xếp theo thứ tự từ vựng. Nếu ta không truyền columns thì các cột của DataFrame sẽ được sắp xếp theo thứ tự truyền vào các keys của dict. Khi truyền biến index vào, tương tự như Series, chỉ những index nằm trong index mới được chọn, còn những index bị thiếu sẽ được điền giá trị NaN Khi truyền giá trị columns, DataFrame sẽ chọn những Series thuộc dict có key thuộc columns, giá trị trong columns không có trong key của dict sẽ được gán NaN In [1]: d = { &quot;one&quot;: pd.Series([1, 2, 3], index=[&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]), &quot;two&quot;: pd.Series([1, 2, 3, 4], index=[&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;d&quot;]) } In [2]: pd.DataFrame(d) Out[2]: one two a 3.0 2 b 2.0 3 c 1.0 1 d NaN 4 In [3]: pd.DataFrame(d, index=[&quot;d&quot;, &quot;b&quot;, &quot;a&quot;]) Out[3]: one two d NaN 4 b 2.0 3 a 3.0 2 In [4]: pd.DataFrame(d, index=[&quot;d&quot;, &quot;b&quot;, &quot;a&quot;], columns=[&quot;two&quot;, &quot;three&quot;]) Out[4]: two three d 4 NaN b 3 NaN a 2 NaN Khởi tạo DataFrame từ dict của numpy.ndarray/List Đối với việc khởi tạo này, bắt buộc các mảng phải có cùng độ dài. Khi không truyền index vào thì index của DataFrame sẽ được tạo từ 0 đến len(n) - 1 trong đó n là độ dài của mảng. In [1]: d = { &quot;one&quot;: [1, 2, 3, 4], &quot;two&quot;: [1, 2, 3, 4] } In [2]: pd.DataFrame(d) Out[2]: one two 0 1 1 1 2 2 2 3 3 3 4 4 Khởi tạo DataFrame từ Mảng 2 chiều/ 2-d numpy.ndarray Khi không truyền index vào thì index của DataFrame sẽ được tạo từ 0 đến len(n) - 1 trong đó n là số lượng List con hoặc là số dòng hay shape[0] của numpy.ndarray. Khi không truyền columns thì tên columns sẽ được tạo từ 0 đến len(n) - 1 với n là độ dài lớn nhất của List con hoặc shape[1] của numpy.ndarray In [1]: pd.DataFrame(data=[[1, 2], [3, 4, 5]], index=[&quot;a&quot;, &quot;b&quot;], columns=[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;]) Out[1]: one two three a 1 2 NaN b 3 4 5.0 In [2]: pd.DataFrame(data=np.random.rand(2,3), index=[&quot;a&quot;, &quot;b&quot;], columns=[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;])) Out[2]: one two three a 0.662008 0.085735 0.331281 b 0.115360 0.358092 0.862477 Khởi tạo DataFrame từ danh sách các dict Khởi tạo DataFrame từ bản ghi có cấu trúc 1.3 Data type trong pandas Các kiểu dữ liệu phổ biến Numpy/Pandas object Hiển thị Boolean np.bool bool Integer np.int int Float np.float float Object np.object O, object Datetime np.datetime64, pd.Timestamp datetime64 Timedelta np.timedelta64, pd.Timedelta timedelta64 Category pd.categorical category "],["nhập-xuất-trong-pandas.html", "Chương 2 Nhập xuất trong pandas 2.1 Đọc và lưu file 2.2 Cấu hình pandas", " Chương 2 Nhập xuất trong pandas 2.1 Đọc và lưu file 2.2 Cấu hình pandas "],["một-số-hàm-cơ-bản.html", "Chương 3 Một số hàm cơ bản", " Chương 3 Một số hàm cơ bản "],["lặp-trong-pandas.html", "Chương 4 Lặp trong Pandas 4.1 Sử dụng vectorizer 4.2 Sử dụng apply 4.3 Sử dụng iterator 4.4 Xử lý song song trong pandas", " Chương 4 Lặp trong Pandas 4.1 Sử dụng vectorizer 4.2 Sử dụng apply 4.3 Sử dụng iterator 4.4 Xử lý song song trong pandas "],["select-và-filter.html", "Chương 5 Select và Filter 5.1 Index 5.2 loc và iloc 5.3 Lọc theo điều kiện", " Chương 5 Select và Filter 5.1 Index 5.2 loc và iloc 5.3 Lọc theo điều kiện "],["các-cách-phối-hợp-nhiều-bảng-với-nhau.html", "Chương 6 Các cách phối hợp nhiều bảng với nhau 6.1 Join 6.2 Merge 6.3 Concat", " Chương 6 Các cách phối hợp nhiều bảng với nhau 6.1 Join 6.2 Merge 6.3 Concat "],["groupby-và-aggregate.html", "Chương 7 Groupby và Aggregate", " Chương 7 Groupby và Aggregate "],["làm-việc-với-1-số-kiểu-dữ-liệu.html", "Chương 8 Làm việc với 1 số kiểu dữ liệu 8.1 Xử lý dữ liệu dạng text 8.2 Xử lý dữ liệu dạng timestamp 8.3 Category trong pandas 8.4 Xử lý Missing data", " Chương 8 Làm việc với 1 số kiểu dữ liệu 8.1 Xử lý dữ liệu dạng text 8.2 Xử lý dữ liệu dạng timestamp 8.3 Category trong pandas 8.4 Xử lý Missing data "],["một-số-kiến-thức-nâng-cao.html", "Chương 9 Một số kiến thức nâng cao 9.1 MultiIndex 9.2 Pivot và Merge 9.3 Resample 9.4 Window", " Chương 9 Một số kiến thức nâng cao 9.1 MultiIndex 9.2 Pivot và Merge 9.3 Resample 9.4 Window "],["anomaly-detection-project.html", "Chương 10 Anomaly Detection Project", " Chương 10 Anomaly Detection Project "],["visualize-với-matplotlib.html", "Chương 11 Visualize với Matplotlib", " Chương 11 Visualize với Matplotlib "]]
